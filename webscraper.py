{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Create a webscraper to get the summary and the metascore\"\"\"\n",
    "\n",
    "from requests import get\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from time import sleep, time\n",
    "from random import randint\n",
    "from IPython.core.display import clear_output\n",
    "from warnings import warn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Make a list for the url reference\n",
    "#starts at 251 then iterates by +250 (501, 751, etc.)\n",
    "\n",
    "url_nums = ['1']\n",
    "\n",
    "for i in range(1, 40):\n",
    "    val = i*250+1\n",
    "    url_nums.append(str(val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40\n",
      "9751\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: UserWarning: Warning Simulation\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "warn(\"Warning Simulation\")\n",
    "print(len(url_nums))\n",
    "print(url_nums[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Request:40; Frequency: 0.0632259260705339 requests/s\n"
     ]
    }
   ],
   "source": [
    "#Build the scraper\n",
    "titles = []\n",
    "years = []\n",
    "certificates = []\n",
    "runtimes = []\n",
    "genres = []\n",
    "imdb_ratings = []\n",
    "mscores = []\n",
    "summaries = []\n",
    "num_votes = []\n",
    "grosses = []\n",
    "\n",
    "start_time = time()\n",
    "requests = 0\n",
    "\n",
    "\n",
    "\n",
    "for num in url_nums:\n",
    "    \n",
    "    #Make the get request\n",
    "    response = get('https://www.imdb.com/search/title?title_type=feature&release_date=1970-01-01,2019-05-01&user_rating=5.0,10.0&languages=en&count=250&start=' + num + '&ref_=adv_nxt')\n",
    "    \n",
    "    #Sleep to not overload the server\n",
    "    sleep(randint(8,15))\n",
    "    \n",
    "    #Monitor the requests\n",
    "    requests += 1\n",
    "    elapsed_time = time() - start_time\n",
    "    print('Request:{}; Frequency: {} requests/s'.format(requests, requests/elapsed_time))\n",
    "    clear_output(wait=True)\n",
    "    \n",
    "    #throw a warning for a non-200 status code\n",
    "    if response.status_code != 200:\n",
    "        warn('Request: {}; Status code: {}'.format(requests, response.status_code))\n",
    "        \n",
    "    #Break the loop if the number of requests is greater than expected\n",
    "    if requests > len(url_nums):\n",
    "        warn('Number of requests was greater than expected!')\n",
    "        break\n",
    "    \n",
    "    #Parse content of request with Beautiful Soup\n",
    "    page_html = BeautifulSoup(response.text, 'html.parser')\n",
    "    \n",
    "    #Select all 250 movie containers froma  single page\n",
    "    mv_containers = page_html.find_all('div', class_='lister-item mode-advanced')\n",
    "    \n",
    "    #Loop through the movies in each page\n",
    "    for container in mv_containers:\n",
    "        if container.find('div', class_ = 'ratings-metascore') is not None:\n",
    "    \n",
    "    #Titles\n",
    "            title = container.h3.a.text\n",
    "            titles.append(title)\n",
    "    \n",
    "    #Years\n",
    "            year = container.h3.find('span', class_='lister-item-year text-muted unbold').text\n",
    "            years.append(year)\n",
    "    \n",
    "    #Certificates - parental rating (pg-13, R, etc.)\n",
    "            certificate = container.p.span.text\n",
    "            certificates.append(certificate)\n",
    "    \n",
    "    #Runtime - in minutes\n",
    "            runtime = container.p.find('span', class_='runtime').text\n",
    "            runtimes.append(runtime)\n",
    "    \n",
    "    #Genres - up to 3\n",
    "            genre = container.p.find('span', class_='genre').text\n",
    "            genres.append(genre)\n",
    "    \n",
    "    #IMDB ratings\n",
    "            imdb_rating = float(container.strong.text)\n",
    "            imdb_ratings.append(imdb_rating)\n",
    "    \n",
    "    #Metacritic scores\n",
    "            mscore = container.find('span', class_='metascore').text\n",
    "            mscores.append(mscore)\n",
    "    \n",
    "    #Summaries\n",
    "            summary = container.find_all('p', class_='text-muted')[1].text\n",
    "            summaries.append(summary)\n",
    "    \n",
    "    #Number of votes\n",
    "            num_vote = container.find_all('span', attrs={'name':'nv'})[0]\n",
    "            num_vote = num_vote['data-value']\n",
    "            num_votes.append(num_vote)\n",
    "    \n",
    "    #Gross \n",
    "            try:\n",
    "                gross = container.find_all('span', attrs={'name':'nv'})[1]\n",
    "                gross = gross['data-value']\n",
    "            except:\n",
    "                gross = None\n",
    "            grosses.append(gross)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Make it a dataframe\n",
    "df = pd.DataFrame({'title':titles,\n",
    "                   'year':years,\n",
    "                   'certificate':certificates,\n",
    "                   'runtime':runtimes,\n",
    "                   'genre':genres,\n",
    "                   'imdb_rating':imdb_ratings,\n",
    "                   'meta_score':mscores,\n",
    "                   'summary':summaries,\n",
    "                   'num_votes':num_votes,\n",
    "                   'gross':grosses})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6899, 10)\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6899 entries, 0 to 6898\n",
      "Data columns (total 10 columns):\n",
      "title          6899 non-null object\n",
      "year           6899 non-null object\n",
      "certificate    6899 non-null object\n",
      "runtime        6899 non-null object\n",
      "genre          6899 non-null object\n",
      "imdb_rating    6899 non-null float64\n",
      "meta_score     6899 non-null object\n",
      "summary        6899 non-null object\n",
      "num_votes      6899 non-null object\n",
      "gross          5883 non-null object\n",
      "dtypes: float64(1), object(9)\n",
      "memory usage: 539.1+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>certificate</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>imdb_rating</th>\n",
       "      <th>meta_score</th>\n",
       "      <th>summary</th>\n",
       "      <th>num_votes</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Avengers: Endgame</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>181 min</td>\n",
       "      <td>\\nAction, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>78</td>\n",
       "      <td>\\n    After the devastating events of Avengers...</td>\n",
       "      <td>392337</td>\n",
       "      <td>741,394,870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Extremely Wicked, Shockingly Evil, and Vile</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>R</td>\n",
       "      <td>110 min</td>\n",
       "      <td>\\nBiography, Crime, Drama</td>\n",
       "      <td>6.7</td>\n",
       "      <td>52</td>\n",
       "      <td>\\n    A courtroom frenzy ensues and sweeps 197...</td>\n",
       "      <td>27813</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>(2018)</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>149 min</td>\n",
       "      <td>\\nAction, Adventure, Sci-Fi</td>\n",
       "      <td>8.5</td>\n",
       "      <td>68</td>\n",
       "      <td>\\n    The Avengers and their allies must be wi...</td>\n",
       "      <td>656467</td>\n",
       "      <td>678,815,482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Long Shot</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>R</td>\n",
       "      <td>125 min</td>\n",
       "      <td>\\nComedy, Romance</td>\n",
       "      <td>7.2</td>\n",
       "      <td>67</td>\n",
       "      <td>\\n    When Fred Flarsky reunites with his firs...</td>\n",
       "      <td>9052</td>\n",
       "      <td>22,323,046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Captain Marvel</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>123 min</td>\n",
       "      <td>\\nAction, Adventure, Sci-Fi</td>\n",
       "      <td>7.1</td>\n",
       "      <td>64</td>\n",
       "      <td>\\n    Carol Danvers becomes one of the univers...</td>\n",
       "      <td>263792</td>\n",
       "      <td>424,416,519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         title    year certificate  runtime  \\\n",
       "0                            Avengers: Endgame  (2019)       PG-13  181 min   \n",
       "1  Extremely Wicked, Shockingly Evil, and Vile  (2019)           R  110 min   \n",
       "2                       Avengers: Infinity War  (2018)       PG-13  149 min   \n",
       "3                                    Long Shot  (2019)           R  125 min   \n",
       "4                               Captain Marvel  (2019)       PG-13  123 min   \n",
       "\n",
       "                                     genre  imdb_rating  meta_score  \\\n",
       "0  \\nAction, Adventure, Sci-Fi                      8.8  78           \n",
       "1    \\nBiography, Crime, Drama                      6.7  52           \n",
       "2  \\nAction, Adventure, Sci-Fi                      8.5  68           \n",
       "3            \\nComedy, Romance                      7.2  67           \n",
       "4  \\nAction, Adventure, Sci-Fi                      7.1  64           \n",
       "\n",
       "                                             summary num_votes        gross  \n",
       "0  \\n    After the devastating events of Avengers...    392337  741,394,870  \n",
       "1  \\n    A courtroom frenzy ensues and sweeps 197...     27813         None  \n",
       "2  \\n    The Avengers and their allies must be wi...    656467  678,815,482  \n",
       "3  \\n    When Fred Flarsky reunites with his firs...      9052   22,323,046  \n",
       "4  \\n    Carol Danvers becomes one of the univers...    263792  424,416,519  "
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check to see if it's good\n",
    "print(df.shape)\n",
    "print(df.info())\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6899 entries, 0 to 6898\n",
      "Data columns (total 10 columns):\n",
      "title          6899 non-null object\n",
      "year           6899 non-null object\n",
      "certificate    6899 non-null object\n",
      "runtime        6899 non-null object\n",
      "genre          6899 non-null object\n",
      "imdb_rating    6899 non-null float64\n",
      "meta_score     6899 non-null object\n",
      "summary        6899 non-null object\n",
      "num_votes      6899 non-null object\n",
      "gross          5883 non-null object\n",
      "dtypes: float64(1), object(9)\n",
      "memory usage: 539.1+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>year</th>\n",
       "      <th>certificate</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>imdb_rating</th>\n",
       "      <th>meta_score</th>\n",
       "      <th>summary</th>\n",
       "      <th>num_votes</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Avengers: Endgame</td>\n",
       "      <td>2019</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>181</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.8</td>\n",
       "      <td>78</td>\n",
       "      <td>After the devastating events of Avengers: ...</td>\n",
       "      <td>392337</td>\n",
       "      <td>741394870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Extremely Wicked, Shockingly Evil, and Vile</td>\n",
       "      <td>2019</td>\n",
       "      <td>R</td>\n",
       "      <td>110</td>\n",
       "      <td>Biography, Crime, Drama</td>\n",
       "      <td>6.7</td>\n",
       "      <td>52</td>\n",
       "      <td>A courtroom frenzy ensues and sweeps 1970s...</td>\n",
       "      <td>27813</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>2018</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>149</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>8.5</td>\n",
       "      <td>68</td>\n",
       "      <td>The Avengers and their allies must be will...</td>\n",
       "      <td>656467</td>\n",
       "      <td>678815482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Long Shot</td>\n",
       "      <td>2019</td>\n",
       "      <td>R</td>\n",
       "      <td>125</td>\n",
       "      <td>Comedy, Romance</td>\n",
       "      <td>7.2</td>\n",
       "      <td>67</td>\n",
       "      <td>When Fred Flarsky reunites with his first ...</td>\n",
       "      <td>9052</td>\n",
       "      <td>22323046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Captain Marvel</td>\n",
       "      <td>2019</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>123</td>\n",
       "      <td>Action, Adventure, Sci-Fi</td>\n",
       "      <td>7.1</td>\n",
       "      <td>64</td>\n",
       "      <td>Carol Danvers becomes one of the universe'...</td>\n",
       "      <td>263792</td>\n",
       "      <td>424416519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         title  year certificate runtime  \\\n",
       "0                            Avengers: Endgame  2019       PG-13     181   \n",
       "1  Extremely Wicked, Shockingly Evil, and Vile  2019           R     110   \n",
       "2                       Avengers: Infinity War  2018       PG-13     149   \n",
       "3                                    Long Shot  2019           R     125   \n",
       "4                               Captain Marvel  2019       PG-13     123   \n",
       "\n",
       "                                   genre  imdb_rating  meta_score  \\\n",
       "0  Action, Adventure, Sci-Fi                      8.8  78           \n",
       "1    Biography, Crime, Drama                      6.7  52           \n",
       "2  Action, Adventure, Sci-Fi                      8.5  68           \n",
       "3            Comedy, Romance                      7.2  67           \n",
       "4  Action, Adventure, Sci-Fi                      7.1  64           \n",
       "\n",
       "                                             summary num_votes      gross  \n",
       "0      After the devastating events of Avengers: ...    392337  741394870  \n",
       "1      A courtroom frenzy ensues and sweeps 1970s...     27813       None  \n",
       "2      The Avengers and their allies must be will...    656467  678815482  \n",
       "3      When Fred Flarsky reunites with his first ...      9052   22323046  \n",
       "4      Carol Danvers becomes one of the universe'...    263792  424416519  "
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get rid of the annoying \\n characters in teh genre and summary fields\n",
    "df['genre'] = df['genre'].map(lambda x: x.lstrip('\\n'))\n",
    "df['summary'] = df['summary'].map(lambda x: x.lstrip('\\n'))\n",
    "\n",
    "#remove parentheses from year column\n",
    "df['year'] = df['year'].map(lambda x: x.lstrip('(').rstrip(')'))\n",
    "\n",
    "#remove the minutes part of run time\n",
    "df['runtime'] = df['runtime'].map(lambda x: x.rstrip(' min'))\n",
    "\n",
    "#Remove commas from gross\n",
    "df['gross'] = df['gross'].str.replace(',', '')\n",
    "\n",
    "print(df.info())\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write it out to a csv (we are going to try to import it but just in case we don't want to have to do this again)\n",
    "#Have to use a tab separated file in order to get past the commas in the fields\n",
    "df.to_csv(\"data/scraped_data.tsv\", sep='\\t')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
